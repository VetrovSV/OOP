#include <iostream>
#include <vector>

using namespace std;

// создание синонима для типа vector<int>
using vector_int = vector<int>;
// vector -- класс-обёртка для динамического массива
// vector -- шаблонный класс, поэтому поддерживает задание типа
// для вложенных в него значений (здесь это элементы массива). 
// Тип вложенных значений указывается внутри угловых скобок 
// < > при объявлении переменой типа vector


/// вывод динамического массива
void print_vector(const vector_int &v ){
    // вектор передаётся по ссылке чтобы избежать лишнего копирования
    // т.к. эта функция не должна менять вектор, то делаем формальный параметр константой
    // фактический параметр не обязательно должен быть константой
    for (int i = 0; i < v.size(); ++i)
        cout << v[i] << " ";}



int main(int argc, char const *argv[]){   

    vector_int arr;             // динамический массив (пока пустой)
    arr.resize( 100 );          // изменение размера.
    unsigned n = arr.size();    // -> размер
    // обращение к элементам
    arr[0] = 42;
    print_vector( arr );
    arr.clear();                // освобождение памяти 
    // функция clear вызывается автоматически при уничтожении переменной

    // матрица – вектор из векторов
    vector< vector<int> > matr;
    // выделение памяти под 10 элементов (с типом vector<int> )
    matr.resize(10);
    // выделение памяти под строки матрицы 
    // 25 столбцов или элементов в каждой строке
    for (int i = 0; i < matr.size(); ++i)
        matr[i].resize(25);
    

    return 0;
}